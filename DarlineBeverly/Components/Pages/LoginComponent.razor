

@page "/authentication/login"

@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager NavigationManager

<h3>Login</h3>

@if (errors.Count > 0)
{
    <div class="alert alert-danger mt-3">
        <ul class="list-unstyled mb-0">
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

@if (isSuccessful)
{
    <div class="alert alert-success mt-3">
        Login successful! Redirecting...
    </div>
}
<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="loginForm">

    <DataAnnotationsValidator />

    <div class="form-group mt-2">
        <label for="email">Enter Email Address</label>
        <InputText @bind-Value="loginModel.Email" class="form-control" id="email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="form-group mt-2">
        <label for="password">Enter Password</label>
        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" id="password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <div class="form-group mt-2">
        <div class="form-check">
            <InputCheckbox @bind-Value="loginModel.RememberMe" class="form-check-input" id="rememberMe" />
            <label for="rememberMe" class="form-check-label">Remember Me</label>
        </div>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Login</button>
</EditForm>

@code {
    private Login loginModel { get; set; } = new Login();

    private List<string> errors = new();
    private bool isSuccessful;
    private string ReturnUrl { get; set; } = "/";

    private async Task HandleLogin()
    {
        errors.Clear();

        var result = await SignInManager.PasswordSignInAsync(
            loginModel.Email,
            loginModel.Password,
            loginModel.RememberMe,
            lockoutOnFailure: false
        );

        if (result.Succeeded)
        {
            isSuccessful = true;
            await Task.Delay(1000);
            NavigationManager.NavigateTo(ReturnUrl, forceLoad: true);
        }
        else
        {
            errors.Add("Invalid login attempt. Please check your email and password.");
        }
    }
}
