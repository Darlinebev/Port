@page "/authentication/login"

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using DarlineBeverly.Data
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Login</h3>

@if (errors.Count > 0)
{
    <div class="alert alert-danger mt-3">
        <ul class="list-unstyled mb-0">
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

@if (isSuccessful)
{
    <div class="alert alert-success mt-3">
        Login successful! Redirecting...
    </div>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mt-2">
        <label for="email">Enter Email Address</label>
        <InputText id="email" class="form-control"
                   Value="loginModel.Email"
                   ValueChanged="@(e => loginModel.Email = e)"
                   ValueExpression="() => loginModel.Email" />
        <ValidationMessage For="() => loginModel.Email" />
    </div>

    <div class="form-group mt-2">
        <label for="password">Enter Password</label>
        <InputPassword id="password" class="form-control"
                       Value="loginModel.Password"
                       ValueChanged="@(e => loginModel.Password = e)"
                       ValueExpression="() => loginModel.Password" />
        <ValidationMessage For="() => loginModel.Password" />
    </div>

    <div class="form-group mt-2">
        <div class="form-check">
            <InputCheckbox id="rememberMe" class="form-check-input"
                           Value="loginModel.RememberMe"
                           ValueChanged="@(e => loginModel.RememberMe = e)"
                           ValueExpression="() => loginModel.RememberMe" />
            <label for="rememberMe" class="form-check-label">Remember Me</label>
        </div>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Login</button>
</EditForm>

@code {
    public Login loginModel { get; set; } = new Login();

    private List<string> errors = new();
    private bool isSuccessful;
    private string ReturnUrl { get; set; } = "/";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo(ReturnUrl, forceLoad: true);
        }
    }

    private async Task HandleLogin()
    {
        errors.Clear();

        var result = await SignInManager.PasswordSignInAsync(
            loginModel.Email,
            loginModel.Password,
            loginModel.RememberMe,
            lockoutOnFailure: false
        );

        if (result.Succeeded)
        {
            isSuccessful = true;
            await Task.Delay(1000);
            NavigationManager.NavigateTo(ReturnUrl, forceLoad: true);
        }
        else
        {
            errors.Add("Invalid login attempt. Please check your email and password.");
        }
    }
}


