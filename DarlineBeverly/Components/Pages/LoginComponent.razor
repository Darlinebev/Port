@page "/authentication/login"

@using Microsoft.AspNetCore.Identity
@using DarlineBeverly.Data
@using System.ComponentModel.DataAnnotations
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-@(loginSucceeded ? "success" : "danger")">
        @errorMessage
    </div>
}

<EditForm Model="@loginModel" OnSubmit="@HandleLogin" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <div class="form-check mb-3">
        <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="loginModel.RememberMe" />
        <label class="form-check-label" for="rememberMe">Remember Me</label>
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool loginSucceeded = false;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        loginSucceeded = false;

        var result = await SignInManager.PasswordSignInAsync(
            loginModel.Email,
            loginModel.Password,
            loginModel.RememberMe,
            lockoutOnFailure: false);

        if (result.Succeeded)
        {
            loginSucceeded = true;
            errorMessage = "✅ Login successful! Redirecting…";
            NavigationManager.NavigateTo("/");
        }
        else
        {
            // Show detailed flags to debug why it failed
            errorMessage = $"❌ Login failed. " +
                           $"Succeeded: {result.Succeeded}, " +
                           $"LockedOut: {result.IsLockedOut}, " +
                           $"Requires2FA: {result.RequiresTwoFactor}, " +
                           $"NotAllowed: {result.IsNotAllowed}";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; } = false;
    }
}
