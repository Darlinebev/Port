

@page "/authentication/login"

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authentication
@using System.Security.Claims
@using DarlineBeverly.Data
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager NavigationManager

<h3>Login</h3>

<EditForm Model="Login" OnValidSubmit="HandleLogin" FormName="loginForm">
    <DataAnnotationsValidator />

    <div class="form-group mt-2">
        <label class="form-label" for="email">Enter Email Address</label>
        <InputText @bind-Value="Login.Email" class="form-control" />
        <ValidationMessage For="() => Login.Email" />
    </div>

    <div class="form-group mt-2">
        <label class="form-label" for="password">Enter Password</label>
        <InputText @bind-Value="Login.Password" type="password" class="form-control" />
        <ValidationMessage For="() => Login.Password" />
    </div>

    <div class="form-group mt-2">
        <div class="form-check">
            <InputCheckbox @bind-Value="Login.RememberMe" class="form-check-input" />
            <label class="form-check-label" for="rememberMe">Remember Me</label>
        </div>
    </div>

    <div class="form-group mt-3">
        <button type="submit" class="btn btn-primary">Login</button>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm(FormName = "loginForm")]
    public Login Login { get; set; } = new Login();

    [SupplyParameterFromQuery]
    private string ReturnUrl { get; set; } = "/";

    private async Task HandleLogin()
    {
        var result = await SignInManager.PasswordSignInAsync(Login.Email, Login.Password, Login.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo(ReturnUrl);
        }
        else
        {
            Console.WriteLine("Invalid login attempt.");
        }
    }
}
