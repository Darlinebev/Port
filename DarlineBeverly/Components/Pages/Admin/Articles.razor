@page "/admin/articles"
@using DarlineBeverly.Components
@using DarlineBeverly.Models
@using DarlineBeverly.Dtos
@using Microsoft.AspNetCore.Components.Authorization
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Nav
@inject IJSRuntime JS

<AuthorizeView>
    <Authorized>
        <h2>Admin - Articles</h2>
        <button class="btn" style="background-color:green;" @onclick="CreateNew">Create New</button>

        @if (articles == null)
        {
            <p>Loading...</p>
        }
        else if (!articles.Any())
        {
            <p>No articles found.</p>
        }
        else
        {
            <table class="admin-table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Published</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var a in articles)
                    {
                        <tr>
                            <td>@a.Title</td>
                            <td>@(a.IsPublished ? "Yes" : "Draft")</td>
                            <td>
                                <button @onclick="() => Edit(a.Id)">Edit</button>
                                <button @onclick="() => Delete(a.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <p>Please <a href="/login">log in</a> to manage articles.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<AdminArticleListItem>? articles;

    private HttpClient Http => HttpClientFactory.CreateClient("Default");

    protected override async Task OnInitializedAsync()
    {
        try
        {
            articles = await Http.GetFromJsonAsync<List<AdminArticleListItem>>("/api/admin/articleslist")
                       ?? new List<AdminArticleListItem>();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching articles: {ex.Message}");
            articles = new List<AdminArticleListItem>();
        }
    }

    private void CreateNew() => Nav.NavigateTo("/admin/articles/edit");

    private void Edit(int id) => Nav.NavigateTo($"/admin/articles/edit/{id}");

    private async Task Delete(int id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", $"Delete article {id}?")) 
            return;

        var res = await Http.DeleteAsync($"/api/admin/articles/{id}");
        if (res.IsSuccessStatusCode)
        {
            articles = articles!.Where(a => a.Id != id).ToList();
        }
        else
        {
            Console.Error.WriteLine($"Failed to delete article {id}. Status: {res.StatusCode}");
        }
    }

    private class AdminArticleListItem
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public bool IsPublished { get; set; }
    }
}