@page "/login"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject NavigationManager Nav

<h3>Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color:red">@ErrorMessage</p>
}

<EditForm Model="model" OnValidSubmit="LoginAsync" FormName="loginForm">
    <InputText @bind-Value="model.Username" placeholder="Username" />
    <InputText type="password" @bind-Value="model.Password" placeholder="Password" />
    <button type="submit">Login</button>
</EditForm>

@code {
    private LoginModel model = new();
    private string? ErrorMessage;

    private class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private async Task LoginAsync()
    {
        try
        {
            Console.WriteLine($"Username from component: {model.Username}");
            Console.WriteLine($"Password from component: {model.Password}");

            // The correct way to get the antiforgery token in a Blazor component
            // is to create a new request and then get the antiforgery token from the headers
            // that the Antiforgery middleware adds.
            var token = await GetAntiforgeryTokenAsync();
            
            // Create a request message and add the token to the header
            var request = new HttpRequestMessage(HttpMethod.Post, "/api/login")
            {
                Content = JsonContent.Create(model)
            };
            request.Headers.Add("X-CSRF-TOKEN", token);

            // Send the request
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                Nav.NavigateTo("/admin/articles");
            }
            else
            {
                ErrorMessage = $"Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error during login: {ex.Message}";
        }
    }
    
    // A helper method to get the antiforgery token
    private async Task<string> GetAntiforgeryTokenAsync()
    {
        var response = await Http.GetAsync("/api/get-antiforgery-token");
        response.EnsureSuccessStatusCode();
        var token = await response.Content.ReadAsStringAsync();
        return token;
    }
}